/* Generated By:JavaCC: Do not edit this line. OBO.java */
package tools.goanalysis.parser;

import java.util.HashMap;
import java.util.Vector;
import java.util.Map;
import tools.goanalysis.LHashMap;
import tools.goanalysis.StanzaMap;

import java.net.URL;

public class OBO implements OBOConstants {

  public static void main(String args[]) throws ParseException {
    OBO parser = new OBO(System.in);
    Vector<StanzaMap> res = parser.ParseOBOStream();
    java.util.Enumeration<StanzaMap> e = res.elements();
    while (e.hasMoreElements()) {
      StanzaMap v = (StanzaMap) e.nextElement();
      v.print();
      System.out.println();
    }
  }

  public static Vector<StanzaMap> parseOBOFile(String file) throws ParseException {
    try {
      System.out.println("Reading file " + file);
      OBO parser;
      if (file.startsWith("http:")) {
        URL url = new URL(file);
        parser = new OBO(url.openStream());
      }
      else {
        parser = new OBO(new java.io.FileInputStream(file));
      }
      Vector<StanzaMap> res = parser.ParseOBOStream();
      java.util.Enumeration<StanzaMap> e = res.elements();
      return res;
    }
    catch(java.io.IOException e) {
      throw new ParseException("Can't read file : " + file);
    }
  }

  final public Vector<StanzaMap> ParseOBOStream() throws ParseException {
    LHashMap<String,String> map = null;
    StanzaMap st = null;
    Vector<StanzaMap> res = new  Vector<StanzaMap>();
    map = header();
                   st = new StanzaMap(map, "Header"); res.add(st);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      st = stanza();
                    res.add(st);
    }
    jj_consume_token(0);
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public LHashMap<String,String> header() throws ParseException {
    LHashMap<String,String> map;
    map = tagValuePairs();
        {if (true) return map;}
    throw new Error("Missing return statement in function");
  }

  final public StanzaMap stanza() throws ParseException {
    LHashMap<String,String> map;
    Token t1 = null;
    jj_consume_token(25);
    t1 = jj_consume_token(IDENTIFIER);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINE_WORD:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(LINE_WORD);
    }
    jj_consume_token(LINE_END);
    map = tagValuePairs();
    {if (true) return new StanzaMap(map, t1.image);}
    throw new Error("Missing return statement in function");
  }

  final public LHashMap<String,String> tagValuePairs() throws ParseException {
    LHashMap<String,String> map = new LHashMap<String,String>();
    HashMap<String,String> tmp = null;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SPACE:
      case EOL:
      case FORMATVERSION:
      case TYPEREF:
      case DEF:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      tmp = tagValuePair();
        map.putAllMap(tmp);
    }
    {if (true) return map;}
    throw new Error("Missing return statement in function");
  }

  final public HashMap<String,String> tagValuePair() throws ParseException {
    String key;
    String val;
    Token t1 = null;
    String t2 = null;
    String t3 = null;
    HashMap<String,String> map = new HashMap<String,String>();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      t1 = jj_consume_token(IDENTIFIER);
      jj_consume_token(LCOLON);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        jj_consume_token(SPACE);
      }
      t2 = tagValue();
      break;
    case FORMATVERSION:
      t1 = jj_consume_token(FORMATVERSION);
      jj_consume_token(LCOLON);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        jj_consume_token(SPACE);
      }
      t2 = tagValue();
      break;
    case TYPEREF:
      t1 = jj_consume_token(TYPEREF);
      jj_consume_token(LCOLON);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_6;
        }
        jj_consume_token(SPACE);
      }
      t2 = tagValue();
      break;
    case DEF:
      t1 = jj_consume_token(DEF);
      jj_consume_token(COLON);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_7;
        }
        jj_consume_token(SPACE);
      }
      t2 = parseString();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_8;
        }
        jj_consume_token(SPACE);
      }
      t3 = dbxRef();
      break;
    case SPACE:
      jj_consume_token(SPACE);
      jj_consume_token(EOL);
      break;
    case EOL:
      jj_consume_token(EOL);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (t1 == null || t2 == null) {
        {if (true) return null;}
    }
    key = t1.image;
    val = t2;
    if (t3 != null) {
        val = val + " " + t3;
    }
    map.put(key, val);
    {if (true) return map;}
    throw new Error("Missing return statement in function");
  }

  final public String dbxRef() throws ParseException {
    StringBuffer res= new StringBuffer();
    Token t1 = null;
    jj_consume_token(25);
         res.append("[");
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      t1 = jj_consume_token(COLON);
                  res.append(t1.image);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    t1 = jj_consume_token(IDENTIFIER);
                     res.append(t1.image);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCOLON:
      case LINE_WORD:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINE_WORD:
        t1 = jj_consume_token(LINE_WORD);
                     res.append(t1.image);
        break;
      case LCOLON:
        t1 = jj_consume_token(LCOLON);
                   res.append(t1.image);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t1 = jj_consume_token(LINE_END);
        res.append(t1.image);
        {if (true) return res.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String tagValue() throws ParseException {
    StringBuffer res= new StringBuffer();
    Token t1 = null;
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LCOLON:
      case LINE_WORD:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LINE_WORD:
        t1 = jj_consume_token(LINE_WORD);
                   res.append(t1.image);
        break;
      case LCOLON:
        t1 = jj_consume_token(LCOLON);
                   res.append(t1.image);
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    t1 = jj_consume_token(LINE_END);
        res.append(t1.image);
        {if (true) return res.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String parseString() throws ParseException {
    StringBuffer res= new StringBuffer();
    Token t1 = null;
    t1 = jj_consume_token(STRING_START);
                        res.append(t1.image);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_WORD:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_11;
      }
      t1 = jj_consume_token(STRING_WORD);
                         res.append(t1.image);
    }
    t1 = jj_consume_token(STRING_END);
        res.append(t1.image);
        {if (true) return res.toString();}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public OBOTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000000,0x400000,0x1f800,0x800,0x800,0x800,0x800,0x800,0x1f800,0x20000,0x500000,0x500000,0x500000,0x500000,0x1000000,};
   }

  /** Constructor with InputStream. */
  public OBO(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public OBO(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new OBOTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public OBO(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new OBOTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public OBO(OBOTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(OBOTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[26];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 26; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
