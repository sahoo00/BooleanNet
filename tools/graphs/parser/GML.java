/* Generated By:JavaCC: Do not edit this line. GML.java */
package tools.graphs.parser;

import java.util.*;
import java.net.URL;
import tools.graphs.*;

public class GML implements GMLConstants {

  public static void main(String args[]) throws ParseException {
    GML parser = new GML(System.in);
    Vector<Graph> res = parser.ParseGMLStream();
    res.get(0).print();
  }

  public static Vector<Graph> parseGMLFile(String file) throws ParseException {
    try {
      System.out.println("Reading file " + file);
      GML parser;
      if (file.startsWith("http:")) {
        URL url = new URL(file);
        parser = new GML(url.openStream());
      }
      else {
        parser = new GML(new java.io.FileInputStream(file));
      }
      Vector<Graph> res = parser.ParseGMLStream();
      return res;
    }
    catch(java.io.IOException e) {
      throw new ParseException("Can't read file : " + file);
    }
  }

  final public Vector<Graph> ParseGMLStream() throws ParseException {
    Vector<Graph> res = new Vector<Graph>();
    Graph st = null;
    header();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GRAPH:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      st = graph();
                   res.add(st);
    }
    jj_consume_token(0);
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public void header() throws ParseException {
    list();
  }

  final public Graph graph() throws ParseException {
    Graph res = new GGraph();
    HashMap<Integer, Node> hash = null;
    jj_consume_token(GRAPH);
    jj_consume_token(23);
    hash = nodes();
    edges(hash);
    jj_consume_token(24);
    Iterator<Integer> itr = hash.keySet().iterator();
    while (itr.hasNext()) {
        Integer id = (Integer) itr.next();
        Node val = hash.get(id);
        if (val.isRoot()) {
            res.addRoot(val);
        }
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public HashMap<Integer, Node> nodes() throws ParseException {
    HashMap<Integer, Node> map = new HashMap<Integer, Node>();
    HashMap<String, Object> res;
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NODE:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(NODE);
      jj_consume_token(23);
      res = list();
      jj_consume_token(24);
    Integer id = (Integer) res.get("id");
    GNode node = new GNode(id.toString());
    Iterator<String> itr = res.keySet().iterator();
    while (itr.hasNext()) {
        String key = (String) itr.next();
        Object val = res.get(key);
        node.setAttribute(key, val);
    }
    map.put(id, node);
    }
    {if (true) return map;}
    throw new Error("Missing return statement in function");
  }

  final public void edges(HashMap<Integer, Node> map) throws ParseException {
    HashMap<String, Object> res;
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EDGE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(EDGE);
      jj_consume_token(23);
      res = list();
      jj_consume_token(24);
    Integer s = (Integer) res.get("source");
    Integer d = (Integer) res.get("target");
    Node src = map.get(s);
    Node dst = map.get(d);
    src.addChild(dst);
    }
  }

  final public HashMap<String, Object> list() throws ParseException {
    HashMap<String, Object> res = new HashMap<String, Object>();
    String k = null ;
    Object v = null ;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      k = key();
      v = value();
        if (k.equals("label")) {
            v = v.toString();
        }
        res.put(k, v);
    }
        {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String key() throws ParseException {
    StringBuffer res= new StringBuffer();
    Token t1 = null;
    t1 = jj_consume_token(IDENTIFIER);
        res.append(t1.image);
        {if (true) return res.toString();}
    throw new Error("Missing return statement in function");
  }

  final public Object value() throws ParseException {
    Object res = null;
    Token t1 = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      t1 = jj_consume_token(INTEGER);
    int num = Integer.parseInt(t1.image);
    res = new Integer(num);
      break;
    case REAL:
      t1 = jj_consume_token(REAL);
    double num_d = Double.parseDouble(t1.image);
    res = new Double(num_d);
      break;
    case STRING_START:
      res = parseString();
      break;
    case 23:
      jj_consume_token(23);
      res = list();
      jj_consume_token(24);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public String parseString() throws ParseException {
    StringBuffer res= new StringBuffer();
    Token t1 = null;
    t1 = jj_consume_token(STRING_START);
                        res.append(t1.image);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING_WORD:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      t1 = jj_consume_token(STRING_WORD);
                         res.append(t1.image);
    }
    t1 = jj_consume_token(STRING_END);
        res.append(t1.image);
        {if (true) return res.toString();}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public GMLTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4000,0x8000,0x10000,0x80000,0x960000,0x400000,};
   }

  /** Constructor with InputStream. */
  public GML(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public GML(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GMLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public GML(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GMLTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public GML(GMLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(GMLTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
