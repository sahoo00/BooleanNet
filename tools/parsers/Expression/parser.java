
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jun 11 12:42:58 PDT 2018
//----------------------------------------------------

package tools.parsers.Expression;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import tools.io.NetworkInfo;
import tools.microarray.GeneData;

/** CUP v0.10k generated parser.
  * @version Mon Jun 11 12:42:58 PDT 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\044\000\002\007\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\005\004\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\010\000" +
    "\002\003\006\000\002\003\006\000\002\003\006\000\002" +
    "\003\006\000\002\003\006\000\002\003\006\000\002\003" +
    "\006\000\002\003\006\000\002\003\006\000\002\003\006" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\004" +
    "\000\002\003\005\000\002\003\005\000\002\003\006\000" +
    "\002\003\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\042\011\014\024\010\026\007\027\026\030" +
    "\006\031\023\032\025\033\015\034\020\035\012\036\024" +
    "\037\004\040\022\041\021\042\016\043\027\001\002\000" +
    "\004\011\136\001\002\000\004\002\135\001\002\000\004" +
    "\011\132\001\002\000\004\011\127\001\002\000\042\011" +
    "\014\024\010\026\007\027\026\030\006\031\023\032\025" +
    "\033\015\034\020\035\012\036\024\037\004\040\022\041" +
    "\021\042\016\043\027\001\002\000\034\004\125\005\036" +
    "\006\032\007\041\010\034\013\043\014\037\015\045\016" +
    "\042\017\035\022\033\023\044\025\040\001\002\000\004" +
    "\011\122\001\002\000\044\002\ufffe\011\ufffe\024\ufffe\026" +
    "\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe" +
    "\035\ufffe\036\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043" +
    "\ufffe\001\002\000\042\011\014\024\010\026\007\027\026" +
    "\030\006\031\023\032\025\033\015\034\020\035\012\036" +
    "\024\037\004\040\022\041\021\042\016\043\027\001\002" +
    "\000\004\011\113\001\002\000\042\004\ufffc\005\ufffc\006" +
    "\ufffc\007\ufffc\010\ufffc\011\105\012\ufffc\013\ufffc\014\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\021\ufffc\022\ufffc\023\ufffc\025" +
    "\ufffc\001\002\000\044\002\001\011\014\024\010\026\007" +
    "\027\026\030\006\031\023\032\025\033\015\034\020\035" +
    "\012\036\024\037\004\040\022\041\021\042\016\043\027" +
    "\001\002\000\004\011\101\001\002\000\040\004\ufffa\005" +
    "\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa\014\ufffa" +
    "\015\ufffa\016\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa\025" +
    "\ufffa\001\002\000\004\011\076\001\002\000\004\011\073" +
    "\001\002\000\004\011\070\001\002\000\004\011\065\001" +
    "\002\000\004\011\062\001\002\000\042\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\016\ufffb\017\ufffb\020\030\021\ufffb\022\ufffb\023\ufffb" +
    "\025\ufffb\001\002\000\042\011\014\024\010\026\007\027" +
    "\026\030\006\031\023\032\025\033\015\034\020\035\012" +
    "\036\024\037\004\040\022\041\021\042\016\043\027\001" +
    "\002\000\040\004\uffe0\005\036\006\032\007\041\010\034" +
    "\012\uffe0\013\043\014\037\015\045\016\042\017\035\021" +
    "\uffe0\022\033\023\044\025\040\001\002\000\042\011\014" +
    "\024\010\026\007\027\026\030\006\031\023\032\025\033" +
    "\015\034\020\035\012\036\024\037\004\040\022\041\021" +
    "\042\016\043\027\001\002\000\042\011\014\024\010\026" +
    "\007\027\026\030\006\031\023\032\025\033\015\034\020" +
    "\035\012\036\024\037\004\040\022\041\021\042\016\043" +
    "\027\001\002\000\042\011\014\024\010\026\007\027\026" +
    "\030\006\031\023\032\025\033\015\034\020\035\012\036" +
    "\024\037\004\040\022\041\021\042\016\043\027\001\002" +
    "\000\042\011\014\024\010\026\007\027\026\030\006\031" +
    "\023\032\025\033\015\034\020\035\012\036\024\037\004" +
    "\040\022\041\021\042\016\043\027\001\002\000\042\011" +
    "\014\024\010\026\007\027\026\030\006\031\023\032\025" +
    "\033\015\034\020\035\012\036\024\037\004\040\022\041" +
    "\021\042\016\043\027\001\002\000\042\011\014\024\010" +
    "\026\007\027\026\030\006\031\023\032\025\033\015\034" +
    "\020\035\012\036\024\037\004\040\022\041\021\042\016" +
    "\043\027\001\002\000\042\011\014\024\010\026\007\027" +
    "\026\030\006\031\023\032\025\033\015\034\020\035\012" +
    "\036\024\037\004\040\022\041\021\042\016\043\027\001" +
    "\002\000\042\011\014\024\010\026\007\027\026\030\006" +
    "\031\023\032\025\033\015\034\020\035\012\036\024\037" +
    "\004\040\022\041\021\042\016\043\027\001\002\000\042" +
    "\011\014\024\010\026\007\027\026\030\006\031\023\032" +
    "\025\033\015\034\020\035\012\036\024\037\004\040\022" +
    "\041\021\042\016\043\027\001\002\000\042\011\014\024" +
    "\010\026\007\027\026\030\006\031\023\032\025\033\015" +
    "\034\020\035\012\036\024\037\004\040\022\041\021\042" +
    "\016\043\027\001\002\000\042\011\014\024\010\026\007" +
    "\027\026\030\006\031\023\032\025\033\015\034\020\035" +
    "\012\036\024\037\004\040\022\041\021\042\016\043\027" +
    "\001\002\000\042\011\014\024\010\026\007\027\026\030" +
    "\006\031\023\032\025\033\015\034\020\035\012\036\024" +
    "\037\004\040\022\041\021\042\016\043\027\001\002\000" +
    "\040\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\022" +
    "\033\023\044\025\040\001\002\000\040\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\015" +
    "\uffe4\016\uffe4\017\uffe4\021\uffe4\022\uffe4\023\uffe4\025\040" +
    "\001\002\000\040\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\021\uffe9\022\033\023\044\025\040\001\002\000\040\004" +
    "\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\022\033\023" +
    "\044\025\040\001\002\000\040\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\012\uffec\013\043\014\037\015\045\016" +
    "\042\017\035\021\uffec\022\033\023\044\025\040\001\002" +
    "\000\040\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\025\040\001\002\000\040\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8" +
    "\015\uffe8\016\uffe8\017\uffe8\021\uffe8\022\033\023\044\025" +
    "\040\001\002\000\040\004\uffee\005\uffee\006\uffee\007\041" +
    "\010\034\012\uffee\013\043\014\037\015\045\016\042\017" +
    "\035\021\uffee\022\033\023\044\025\040\001\002\000\040" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012\uffea\013" +
    "\uffea\014\uffea\015\uffea\016\uffea\017\uffea\021\uffea\022\033" +
    "\023\044\025\040\001\002\000\040\004\uffeb\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\012\uffeb\013\043\014\037\015\045" +
    "\016\042\017\035\021\uffeb\022\033\023\044\025\040\001" +
    "\002\000\040\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\021" +
    "\uffe5\022\uffe5\023\044\025\040\001\002\000\040\004\uffed" +
    "\005\uffed\006\uffed\007\041\010\034\012\uffed\013\043\014" +
    "\037\015\045\016\042\017\035\021\uffed\022\033\023\044" +
    "\025\040\001\002\000\004\044\063\001\002\000\004\012" +
    "\064\001\002\000\040\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7\001\002\000\042" +
    "\011\014\024\010\026\007\027\026\030\006\031\023\032" +
    "\025\033\015\034\020\035\012\036\024\037\004\040\022" +
    "\041\021\042\016\043\027\001\002\000\034\005\036\006" +
    "\032\007\041\010\034\012\067\013\043\014\037\015\045" +
    "\016\042\017\035\022\033\023\044\025\040\001\002\000" +
    "\040\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\025\ufff4\001\002\000\042\011\014\024\010" +
    "\026\007\027\026\030\006\031\023\032\025\033\015\034" +
    "\020\035\012\036\024\037\004\040\022\041\021\042\016" +
    "\043\027\001\002\000\034\005\036\006\032\007\041\010" +
    "\034\012\072\013\043\014\037\015\045\016\042\017\035" +
    "\022\033\023\044\025\040\001\002\000\040\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1" +
    "\015\ufff1\016\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1\025" +
    "\ufff1\001\002\000\004\044\074\001\002\000\004\012\075" +
    "\001\002\000\040\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010" +
    "\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\021\ufff5\022\ufff5\023\ufff5\025\ufff5\001\002\000\042\011" +
    "\014\024\010\026\007\027\026\030\006\031\023\032\025" +
    "\033\015\034\020\035\012\036\024\037\004\040\022\041" +
    "\021\042\016\043\027\001\002\000\034\005\036\006\032" +
    "\007\041\010\034\012\100\013\043\014\037\015\045\016" +
    "\042\017\035\022\033\023\044\025\040\001\002\000\040" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\021\uffef\022\uffef" +
    "\023\uffef\025\uffef\001\002\000\042\011\014\024\010\026" +
    "\007\027\026\030\006\031\023\032\025\033\015\034\020" +
    "\035\012\036\024\037\004\040\022\041\021\042\016\043" +
    "\027\001\002\000\034\005\036\006\032\007\041\010\034" +
    "\012\103\013\043\014\037\015\045\016\042\017\035\022" +
    "\033\023\044\025\040\001\002\000\040\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\025\ufff2" +
    "\001\002\000\044\002\uffff\011\uffff\024\uffff\026\uffff\027" +
    "\uffff\030\uffff\031\uffff\032\uffff\033\uffff\034\uffff\035\uffff" +
    "\036\uffff\037\uffff\040\uffff\041\uffff\042\uffff\043\uffff\001" +
    "\002\000\042\011\014\024\010\026\007\027\026\030\006" +
    "\031\023\032\025\033\015\034\020\035\012\036\024\037" +
    "\004\040\022\041\021\042\016\043\027\001\002\000\036" +
    "\005\036\006\032\007\041\010\034\012\110\013\043\014" +
    "\037\015\045\016\042\017\035\021\107\022\033\023\044" +
    "\025\040\001\002\000\042\011\014\024\010\026\007\027" +
    "\026\030\006\031\023\032\025\033\015\034\020\035\012" +
    "\036\024\037\004\040\022\041\021\042\016\043\027\001" +
    "\002\000\040\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf" +
    "\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\017\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\025\uffdf\001\002\000\034\005\036" +
    "\006\032\007\041\010\034\012\112\013\043\014\037\015" +
    "\045\016\042\017\035\022\033\023\044\025\040\001\002" +
    "\000\040\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\012" +
    "\uffde\013\uffde\014\uffde\015\uffde\016\uffde\017\uffde\021\uffde" +
    "\022\uffde\023\uffde\025\uffde\001\002\000\004\044\114\001" +
    "\002\000\004\021\115\001\002\000\042\011\014\024\010" +
    "\026\007\027\026\030\006\031\023\032\025\033\015\034" +
    "\020\035\012\036\024\037\004\040\022\041\021\042\016" +
    "\043\027\001\002\000\034\005\036\006\032\007\041\010" +
    "\034\012\117\013\043\014\037\015\045\016\042\017\035" +
    "\022\033\023\044\025\040\001\002\000\040\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\017\ufff9\021\ufff9\022\ufff9\023\ufff9\025" +
    "\ufff9\001\002\000\034\005\036\006\032\007\041\010\034" +
    "\012\121\013\043\014\037\015\045\016\042\017\035\022" +
    "\033\023\044\025\040\001\002\000\040\004\uffe1\005\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\017\uffe1\021\uffe1\022\uffe1\023\uffe1\025\uffe1" +
    "\001\002\000\042\011\014\024\010\026\007\027\026\030" +
    "\006\031\023\032\025\033\015\034\020\035\012\036\024" +
    "\037\004\040\022\041\021\042\016\043\027\001\002\000" +
    "\034\005\036\006\032\007\041\010\034\012\124\013\043" +
    "\014\037\015\045\016\042\017\035\022\033\023\044\025" +
    "\040\001\002\000\040\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\025\ufff3\001\002\000\044" +
    "\002\ufffd\011\ufffd\024\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd" +
    "\040\ufffd\041\ufffd\042\ufffd\043\ufffd\001\002\000\040\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\022\uffe2\023" +
    "\uffe2\025\uffe2\001\002\000\004\044\130\001\002\000\004" +
    "\012\131\001\002\000\040\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\021\ufff8\022\ufff8\023\ufff8\025\ufff8\001\002\000" +
    "\004\044\133\001\002\000\004\012\134\001\002\000\040" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\016\ufff6\017\ufff6\021\ufff6\022\ufff6" +
    "\023\ufff6\025\ufff6\001\002\000\004\002\000\001\002\000" +
    "\042\011\014\024\010\026\007\027\026\030\006\031\023" +
    "\032\025\033\015\034\020\035\012\036\024\037\004\040" +
    "\022\041\021\042\016\043\027\001\002\000\034\005\036" +
    "\006\032\007\041\010\034\012\140\013\043\014\037\015" +
    "\045\016\042\017\035\022\033\023\044\025\040\001\002" +
    "\000\040\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0" +
    "\022\ufff0\023\ufff0\025\ufff0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\012\003\010\004\016\005\012\007\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\003" +
    "\010\005\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\030\001\001\000\002\001\001\000\004\003\060\001" +
    "\001\000\004\003\057\001\001\000\004\003\056\001\001" +
    "\000\004\003\055\001\001\000\004\003\054\001\001\000" +
    "\004\003\053\001\001\000\004\003\052\001\001\000\004" +
    "\003\051\001\001\000\004\003\050\001\001\000\004\003" +
    "\047\001\001\000\004\003\046\001\001\000\004\003\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\003\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\105\001\001\000\002\001" +
    "\001\000\004\003\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\136\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
    symbolTable_ = new HashMap<String, GeneData>();
    virtualGene_ = new HashMap<Integer, GeneData>();
    virtualGeneName_ = new HashMap<Integer, String>();
    virtualGeneId_ = 0;

    }


    NetworkInfo info_;
    HashMap<String, GeneData> symbolTable_;

    HashMap<Integer, GeneData> virtualGene_;
    HashMap<Integer, String> virtualGeneName_;
    int virtualGeneId_;

    public void setNetworkInfo(NetworkInfo f) { 
      info_ = f; 
    }

    public NetworkInfo getInfo() { return info_; }

    public boolean hasSymbol(String i) { return symbolTable_.containsKey(i); }
    public GeneData getSymbol(String i) { return symbolTable_.get(i); }
    public void addSymbol(String i, GeneData d) { symbolTable_.put(i, d); }

    public void addVirtual(String s, GeneData d) {
      Integer id = new Integer(virtualGeneId_);
      virtualGene_.put(id, d);
      virtualGeneName_.put(id, s);
      virtualGeneId_++;
    }

    public void printVirtualGenes() {
      info_.printHeader();
      Iterator<Integer> itr = virtualGene_.keySet().iterator();
      while (itr.hasNext()) {
        Integer id = itr.next();
        String name = virtualGeneName_.get(id);
        GeneData q = virtualGene_.get(id);
        if (q != null) {
          q.setDataAt(0, "vt_" + id.toString());
          q.setDataAt(1, name);
          q.setDataAt(2, "1");
          q.print();
        }
      }
    }

    public void printVirtualGenesOrder() {
      info_.printHeader();
      for (int i =0; i < virtualGeneId_; i++) {
        Integer id = new Integer(i);
        String name = virtualGeneName_.get(id);
        GeneData q = virtualGene_.get(id);
        if (q != null) {
          q.setDataAt(0, "vt_" + id.toString());
          q.setDataAt(1, name);
          q.setDataAt(2, "1");
          q.print();
        }
      }
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // query ::= ID LPAREN query COMMA query RPAREN 
            {
              GeneData RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			/* look up attribute or function definition i and
			   apply to array q */
                        NetworkInfo info = parser.getInfo();
                        if (i.equals("min")) {
                          RESULT = info.min(q1, q2);
                        }
                        else if (i.equals("max")) {
                          RESULT = info.max(q1, q2);
                        }
                        else {
                          System.err.println("Error: Function not defined :" + i);
                          System.exit(1);
                        }
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // query ::= ID LPAREN query RPAREN 
            {
              GeneData RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GeneData q = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			/* look up attribute or function definition i and
			   apply to array q */
                        NetworkInfo info = parser.getInfo();
                        RESULT = q ;
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // query ::= TMPID ASSN query 
            {
              GeneData RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                        parser.addSymbol(i, q);
			RESULT = q ; 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // query ::= LPAREN query RPAREN 
            {
              GeneData RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GeneData q = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			RESULT = q ; 
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // query ::= NOT query 
            {
              GeneData RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise 16.0-q */
                       NetworkInfo info = parser.getInfo();
		       RESULT = info.not(q);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // query ::= query IMPLIES query 
            {
              GeneData RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise | of q1, q2 */
                       NetworkInfo info = parser.getInfo();
		       RESULT = info.implies(q1, q2);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // query ::= query OR query 
            {
              GeneData RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise | of q1, q2 */
                       NetworkInfo info = parser.getInfo();
		       RESULT = info.or(q1, q2);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // query ::= query AND query 
            {
              GeneData RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise & of q1, q2 */
                       NetworkInfo info = parser.getInfo();
		       RESULT = info.and(q1, q2);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // query ::= query GEQ query 
            {
              GeneData RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise >= of q1, q2 */
                       NetworkInfo info = parser.getInfo();
		       RESULT = info.greaterThanEq(q1, q2);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // query ::= query LEQ query 
            {
              GeneData RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise <= of q1, q2 */
                       NetworkInfo info = parser.getInfo();
		       RESULT = info.lessThanEq(q1, q2);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // query ::= query GT query 
            {
              GeneData RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise > of q1, q2 */
                       NetworkInfo info = parser.getInfo();
		       RESULT = info.greaterThan(q1, q2);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // query ::= query LT query 
            {
              GeneData RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise < of q1, q2 */
                       NetworkInfo info = parser.getInfo();
		       RESULT = info.lessThan(q1, q2);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // query ::= query EQ query 
            {
              GeneData RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise equality of q1, q2 */
                       NetworkInfo info = parser.getInfo();
		       RESULT = info.equal(q1, q2);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // query ::= query DIVIDE query 
            {
              GeneData RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise quotient of q1, q2 */
                      NetworkInfo info = parser.getInfo();
                      RESULT = info.divide(q1, q2);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // query ::= query TIMES query 
            {
              GeneData RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise product of q1, q2 */
                      NetworkInfo info = parser.getInfo();
                      RESULT = info.times(q1, q2);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // query ::= query MINUS query 
            {
              GeneData RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise diff of q1, q2 */
                      NetworkInfo info = parser.getInfo();
                      RESULT = info.minus(q1, q2);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // query ::= query PLUS query 
            {
              GeneData RESULT = null;
		int q1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int q1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GeneData q1 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int q2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int q2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		GeneData q2 = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 /* elementwise sum of q1, q2 */
                       NetworkInfo info = parser.getInfo();
                       RESULT = info.plus(q1, q2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // query ::= MED LPAREN query RPAREN 
            {
              GeneData RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GeneData q = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /* (Boolean) pointwise q >= upper */ 
			   RESULT = parser.getInfo().getMed(q);
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // query ::= LOW LPAREN query RPAREN 
            {
              GeneData RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GeneData q = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /* (Boolean) pointwise q >= upper */ 
			   RESULT = parser.getInfo().getLow(q);
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // query ::= HIGH LPAREN query RPAREN 
            {
              GeneData RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GeneData q = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /* (Boolean) pointwise q >= upper */ 
			   RESULT = parser.getInfo().getHigh(q);
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // query ::= LOWER LPAREN query RPAREN 
            {
              GeneData RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GeneData q = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  /* threshold - .5 of array q */
			   RESULT = parser.getInfo().getLowerThreshold(q);
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // query ::= UPPER LPAREN query RPAREN 
            {
              GeneData RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GeneData q = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /* threshold + .5 of array q */ 
			   RESULT = parser.getInfo().getUpperThreshold(q);
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // query ::= THRESHOLD LPAREN query RPAREN 
            {
              GeneData RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GeneData q = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			   /* stepminer threshold of values in array q. */
			   /* This should make an array with the same value
				everywhere */
			   RESULT = parser.getInfo().getThreshold(q);
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // query ::= RSEARCH LPAREN STRING RPAREN 
            {
              GeneData RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		     /* Regular expression search */
			   /* Search arrays with string s, return vector of "boolean" 
			      values. */
                           NetworkInfo info = parser.getInfo();
			   RESULT = info.rsearchPhenotype(s);
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // query ::= CSEARCH LPAREN STRING RPAREN 
            {
              GeneData RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /* case sensitive search */ 
			   /* Search arrays with string s, return vector of "boolean" 
			      values. */
                           NetworkInfo info = parser.getInfo();
			   RESULT = info.csearchPhenotype(s);
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // query ::= SEARCH LPAREN STRING RPAREN 
            {
              GeneData RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			   /* Search arrays with string s, return vector of "boolean" 
			      values. */
                           NetworkInfo info = parser.getInfo();
			   RESULT = info.searchPhenotype(s);
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // query ::= PHENOTYPE LPAREN STRING RPAREN 
            {
              GeneData RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
			   /* Search arrays with string s, return vector of "boolean" 
			      values. */
                           NetworkInfo info = parser.getInfo();
			   RESULT = info.getPhenotype(s);
                           if (RESULT == null) {
                             System.err.println("Error: undefined phenotype " + s);
                             System.exit(1);
                           }
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // query ::= VIRTUAL LPAREN STRING COMMA query RPAREN 
            {
              GeneData RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GeneData q = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                           parser.addVirtual(s, q);
			   RESULT = q;
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // query ::= NUMBER 
            {
              GeneData RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                           NetworkInfo info = parser.getInfo();
			   RESULT = info.getNumber(n);
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // query ::= TMPID 
            {
              GeneData RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                           if (parser.hasSymbol(i)) {
                             RESULT = parser.getSymbol(i);
                           }
                           else {
                            System.err.println("Error: undefined temporary " + i);
                            System.exit(1);
                           }
			
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // query ::= ID 
            {
              GeneData RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
                        NetworkInfo info = parser.getInfo();
			GeneData stub = info.getGeneDataByName(i);
                        if (stub == null) {
                            System.err.println("Error: Couldn't find " + i);
                            System.exit(1);
                        }
			RESULT = stub;
		    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*query*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_part ::= query SEMI 
            {
              Object RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GeneData q = (GeneData)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        /*
                           System.out.print("[");
                           if (q != null) {
                             for (int i = 0; i < q.size(); i++) {
                               if (i != 0) {
                                 System.out.print(" ");
                               }
                               System.out.print(q.getDataAt(i));
                             }
                           }
                           System.out.println("]");
                         */
                      
              CUP$parser$result = new java_cup.runtime.Symbol(3/*statement_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement_list ::= statement_part 
            {
              Object RESULT = null;
		
                        /* Populate Symbol table */
                      
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statement_list ::= statement_list statement_part 
            {
              Object RESULT = null;
		
                        /* Populate Symbol table */
                      
              CUP$parser$result = new java_cup.runtime.Symbol(2/*statement_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= all EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // all ::= statement_list 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*all*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

