/* The following code was generated by JFlex 1.4.1 on 6/11/18 12:42 PM */

/*

Copyright (c) 2006, the Board of Trustees of Leland
Stanford Junior University.

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    * Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following disclaimer
in the documentation and/or other materials provided with the
distribution.

    * Neither the name of Stanford University nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

/*
 Author: Debashis Sahoo <sahoo@stanford.edu>
 Author: David Dill <dill@cs.stanford.edu>
 */

package tools.parsers.Expression;

import java_cup.runtime.*;
      

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 6/11/18 12:42 PM from the specification file
 * <tt>/mnt/booleanfs/sahoo/softwares/BooleanNet/tools/parsers/Expression.flex</tt>
 */
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STR = 1;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  3,  2,  0,  3,  1,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     3, 18, 41,  0, 40,  0, 16,  0, 19, 20, 14, 12,  8, 13,  6, 15, 
     5,  5,  5,  5,  5,  5,  5,  5,  5,  5,  0,  7, 10,  9, 11,  0, 
     0,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  0, 42,  0,  0,  4, 
     0, 29,  4, 31, 33, 23,  4, 37, 22, 36,  4,  4, 32, 38, 24, 25, 
    21,  4, 30, 28, 26, 34, 39, 35,  4, 27,  4,  0, 17,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\12\3\1\1\1\23\1\24"+
    "\1\25\1\26\1\4\1\27\1\30\1\31\1\32\12\3"+
    "\1\33\1\34\1\35\1\36\1\37\6\3\1\40\1\3"+
    "\1\41\2\3\1\42\14\3\1\43\1\44\3\3\1\45"+
    "\5\3\1\46\1\47\1\50\2\3\1\51\1\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[99];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\126\0\254\0\327\0\u0102"+
    "\0\126\0\126\0\u012d\0\u0158\0\u0183\0\126\0\u01ae\0\126"+
    "\0\126\0\126\0\126\0\126\0\126\0\126\0\u01d9\0\u0204"+
    "\0\u022f\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u0387\0\126\0\u03b2\0\126\0\u03dd\0\u0102\0\126\0\126"+
    "\0\126\0\126\0\u0408\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df"+
    "\0\u050a\0\u0535\0\u0560\0\u058b\0\u0387\0\126\0\126\0\126"+
    "\0\126\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8"+
    "\0\u06e3\0\254\0\u070e\0\u0739\0\254\0\u0764\0\u078f\0\u07ba"+
    "\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912"+
    "\0\u093d\0\254\0\254\0\u0968\0\u0993\0\u09be\0\254\0\u09e9"+
    "\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\254\0\254\0\254\0\u0ac0"+
    "\0\u0aeb\0\254\0\254";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[99];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\3\6\1\31"+
    "\1\6\1\32\1\6\1\33\1\34\1\35\1\6\1\36"+
    "\3\6\1\37\1\40\1\41\1\42\1\3\1\43\2\3"+
    "\46\43\1\44\1\45\55\0\1\5\54\0\2\6\17\0"+
    "\23\6\7\0\1\6\1\7\1\46\16\0\23\6\10\0"+
    "\1\46\56\0\1\47\52\0\1\50\52\0\1\51\54\0"+
    "\1\52\43\0\2\6\17\0\1\6\1\53\21\6\7\0"+
    "\2\6\17\0\17\6\1\54\3\6\7\0\2\6\17\0"+
    "\1\6\1\55\21\6\7\0\2\6\17\0\2\6\1\56"+
    "\20\6\7\0\2\6\17\0\7\6\1\57\13\6\7\0"+
    "\2\6\17\0\7\6\1\60\13\6\7\0\2\6\17\0"+
    "\4\6\1\61\16\6\7\0\2\6\17\0\1\62\22\6"+
    "\7\0\2\6\17\0\2\6\1\63\20\6\7\0\2\6"+
    "\17\0\17\6\1\64\3\6\7\0\2\65\17\0\23\65"+
    "\3\0\1\43\2\0\46\43\32\0\1\66\1\0\1\67"+
    "\3\0\1\70\12\0\1\71\5\0\2\6\17\0\2\6"+
    "\1\72\20\6\7\0\2\6\17\0\20\6\1\73\2\6"+
    "\7\0\2\6\17\0\11\6\1\74\11\6\7\0\2\6"+
    "\17\0\10\6\1\75\12\6\7\0\2\6\17\0\2\6"+
    "\1\76\20\6\7\0\2\6\17\0\2\6\1\77\20\6"+
    "\7\0\2\6\17\0\16\6\1\100\4\6\7\0\2\6"+
    "\17\0\1\101\22\6\7\0\2\6\17\0\14\6\1\102"+
    "\6\6\7\0\2\6\17\0\11\6\1\103\11\6\7\0"+
    "\2\6\17\0\3\6\1\104\17\6\7\0\2\6\17\0"+
    "\1\6\1\105\21\6\7\0\2\6\17\0\2\6\1\106"+
    "\20\6\7\0\2\6\17\0\11\6\1\107\11\6\7\0"+
    "\2\6\17\0\10\6\1\110\12\6\7\0\2\6\17\0"+
    "\10\6\1\111\12\6\7\0\2\6\17\0\2\6\1\112"+
    "\20\6\7\0\2\6\17\0\2\6\1\113\20\6\7\0"+
    "\2\6\17\0\5\6\1\114\15\6\7\0\2\6\17\0"+
    "\4\6\1\115\16\6\7\0\2\6\17\0\7\6\1\116"+
    "\13\6\7\0\2\6\17\0\12\6\1\117\10\6\7\0"+
    "\2\6\17\0\11\6\1\120\11\6\7\0\2\6\17\0"+
    "\11\6\1\121\11\6\7\0\2\6\17\0\11\6\1\122"+
    "\11\6\7\0\2\6\17\0\11\6\1\123\11\6\7\0"+
    "\2\6\17\0\15\6\1\124\5\6\7\0\2\6\17\0"+
    "\5\6\1\125\15\6\7\0\2\6\17\0\1\6\1\126"+
    "\21\6\7\0\2\6\17\0\1\6\1\127\21\6\7\0"+
    "\2\6\17\0\12\6\1\130\10\6\7\0\2\6\17\0"+
    "\12\6\1\131\10\6\7\0\2\6\17\0\10\6\1\132"+
    "\12\6\7\0\2\6\17\0\6\6\1\133\14\6\7\0"+
    "\2\6\17\0\4\6\1\134\16\6\7\0\2\6\17\0"+
    "\1\6\1\135\21\6\7\0\2\6\17\0\1\6\1\136"+
    "\21\6\7\0\2\6\17\0\13\6\1\137\7\6\7\0"+
    "\2\6\17\0\1\140\22\6\7\0\2\6\17\0\13\6"+
    "\1\141\7\6\7\0\2\6\17\0\2\6\1\142\20\6"+
    "\7\0\2\6\17\0\14\6\1\143\6\6\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2838];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\3\1\2\11\3\1\1\11"+
    "\1\1\7\11\13\1\1\11\1\1\1\11\2\1\4\11"+
    "\13\1\4\11\52\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[99];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();

    /* To create a new java_cup.runtime.Symbol with information about
       the current token, the token will have no value in this
       case. */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }
    
    /* Also creates a new java_cup.runtime.Symbol with information
       about the current token, but this object has a value. */
    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return symbol(sym.LEQ);
          }
        case 43: break;
        case 18: 
          { return symbol(sym.RPAREN);
          }
        case 44: break;
        case 42: 
          { return symbol(sym.THRESHOLD);
          }
        case 45: break;
        case 9: 
          { return symbol(sym.GT);
          }
        case 46: break;
        case 29: 
          { string.append('\t');
          }
        case 47: break;
        case 8: 
          { return symbol(sym.LT);
          }
        case 48: break;
        case 3: 
          { return symbol(sym.ID, new String(yytext()));
          }
        case 49: break;
        case 38: 
          { return symbol(sym.RSEARCH);
          }
        case 50: break;
        case 1: 
          { throw new Error("Illegal character <"+yytext()+">");
          }
        case 51: break;
        case 16: 
          { return symbol(sym.NOT);
          }
        case 52: break;
        case 14: 
          { return symbol(sym.AND);
          }
        case 53: break;
        case 33: 
          { return symbol(sym.MED);
          }
        case 54: break;
        case 2: 
          { /* just skip what was found, do nothing */
          }
        case 55: break;
        case 22: 
          { string.append('\\');
          }
        case 56: break;
        case 30: 
          { string.append('\r');
          }
        case 57: break;
        case 10: 
          { return symbol(sym.PLUS);
          }
        case 58: break;
        case 36: 
          { return symbol(sym.UPPER);
          }
        case 59: break;
        case 25: 
          { return symbol(sym.GEQ);
          }
        case 60: break;
        case 32: 
          { return symbol(sym.LOW);
          }
        case 61: break;
        case 41: 
          { return symbol(sym.PHENOTYPE);
          }
        case 62: break;
        case 7: 
          { return symbol(sym.ASSN);
          }
        case 63: break;
        case 12: 
          { return symbol(sym.TIMES);
          }
        case 64: break;
        case 31: 
          { string.append('\"');
          }
        case 65: break;
        case 27: 
          { return symbol(sym.TMPID, new String(yytext()));
          }
        case 66: break;
        case 34: 
          { return symbol(sym.HIGH);
          }
        case 67: break;
        case 17: 
          { return symbol(sym.LPAREN);
          }
        case 68: break;
        case 26: 
          { return symbol(sym.IMPLIES);
          }
        case 69: break;
        case 15: 
          { return symbol(sym.OR);
          }
        case 70: break;
        case 23: 
          { return symbol(sym.EQ);
          }
        case 71: break;
        case 28: 
          { string.append('\n');
          }
        case 72: break;
        case 4: 
          { return symbol(sym.NUMBER, new Double(yytext()));
          }
        case 73: break;
        case 5: 
          { return symbol(sym.SEMI);
          }
        case 74: break;
        case 21: 
          { yybegin(YYINITIAL); 
                                   return symbol(sym.STRING, 
                                   string.toString());
          }
        case 75: break;
        case 11: 
          { return symbol(sym.MINUS);
          }
        case 76: break;
        case 39: 
          { return symbol(sym.CSEARCH);
          }
        case 77: break;
        case 40: 
          { return symbol(sym.VIRTUAL);
          }
        case 78: break;
        case 13: 
          { return symbol(sym.DIVIDE);
          }
        case 79: break;
        case 6: 
          { return symbol(sym.COMMA);
          }
        case 80: break;
        case 35: 
          { return symbol(sym.LOWER);
          }
        case 81: break;
        case 20: 
          { string.append( yytext() );
          }
        case 82: break;
        case 37: 
          { return symbol(sym.SEARCH);
          }
        case 83: break;
        case 19: 
          { string.setLength(0); yybegin(STR);
          }
        case 84: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
